(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{277:function(t,a,s){t.exports=s.p+"assets/img/jdbc.876ef1e5.png"},278:function(t,a,s){t.exports=s.p+"assets/img/mysql.276ebd28.png"},279:function(t,a,s){t.exports=s.p+"assets/img/dm1.ff2bbe75.png"},280:function(t,a,s){t.exports=s.p+"assets/img/dm2.071bf51d.png"},281:function(t,a,s){t.exports=s.p+"assets/img/mysqlDs.0378f10c.png"},296:function(t,a,s){"use strict";s.r(a);var n=s(14),e=Object(n.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"jdbc基础"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jdbc基础"}},[t._v("#")]),t._v(" JDBC基础")]),t._v(" "),a("h3",{attrs:{id:"_1-早期连接数据库"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-早期连接数据库"}},[t._v("#")]),t._v(" 1.早期连接数据库")]),t._v(" "),a("p",[t._v("这里用的是java实现的hsqldb，一款内存数据库。\n早期连接数据库都是如此，基于jdbc，加载驱动，然后从DriverManager获取connection，\n操作完后关闭连接等等。")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Connection")]),t._v(" conn "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Before")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("initData")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Class")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("forName")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"org.hsqldb.jdbcDriver"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        conn "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("DriverManager")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getConnection")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"jdbc:hsqldb:mem:mybatis"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"sa"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Exception")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("printStackTrace")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v('这类操作实际情况就是加载驱动的时候，Class.forName("xxx")后，静态代码块中直接把驱动注册到了jdbc的DriverManager,\n之后DriverManage.getConnection就是遍历内部的DriverList，获取到具体数据库厂商的Driver，调用具体Driver的connect方法。')]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("DriverManager")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("registerDriver")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("jdbcDriver")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Exception")]),t._v(" var1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[a("img",{attrs:{src:s(277),alt:"jdbc"}})]),t._v(" "),a("h3",{attrs:{id:"_2-去掉了加载驱动"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-去掉了加载驱动"}},[t._v("#")]),t._v(" 2.去掉了加载驱动")]),t._v(" "),a("p",[t._v("jdbc4.0之后，jdk基于SPI机制，实现了SPI的厂商无需在加载驱动了，直接DriverManage.getConnection就能获取到具体的连接。\n如mysql基于jdbc的SPI，在META-INF下留了个services文件夹，以java.sql.Driver命名的文件。里面是msyql具体的Driver。实现了java.sql.Driver接口\n"),a("img",{attrs:{src:s(278),alt:"mysql"}})]),t._v(" "),a("p",[t._v("同样，DriverManage的代码是基于ServiceLoader。静态块内执行的方法调用了serviceLoader，加载当前线程下所有实现了java.sql.Driver的实现类。\n然后找到的mysql的Driver，静态块内将自己注册到了DriverManager。\n"),a("img",{attrs:{src:s(279),alt:"dm1"}}),t._v(" "),a("img",{attrs:{src:s(280),alt:"dm2"}})]),t._v(" "),a("h3",{attrs:{id:"_3-jdbc基础操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-jdbc基础操作"}},[t._v("#")]),t._v(" 3.jdbc基础操作")]),t._v(" "),a("p",[t._v("过于基础的几个常用类。")]),t._v(" "),a("ul",[a("li",[t._v("Statement\n"),a("ul",[a("li",[t._v("PreparedStatement")]),t._v(" "),a("li",[t._v("CallableStatement")])])]),t._v(" "),a("li",[t._v("ResultSet")]),t._v(" "),a("li",[t._v("ResultSetMetaData")]),t._v(" "),a("li",[t._v("Connection")]),t._v(" "),a("li",[t._v("DriverManger")])]),t._v(" "),a("p",[t._v("在jdbc2.0后，javax.sql包扩展出了DataSource。java更推荐使用DataSource而非DriverManger。\n官网上说是DataSource抽象成的是资源文件(可以通过JNDI方式加载)，而且他支持分布式事务，还有连接池。\n而Datasource也是有各个驱动厂商实现的。")]),t._v(" "),a("p",[t._v("如mysql中，有自己的实现，但是好像资料比较少，而且看代码来说，也并没有做池化技术。(还蛮奇怪的)")]),t._v(" "),a("p",[a("img",{attrs:{src:s(281),alt:"ds"}})]),t._v(" "),a("p",[t._v("mybatis也提供了datasource的实现，PooledDataSource和UnpooledDataSource。\n不过目前常用的datasource还是hikari和druid比较多。")])])}),[],!1,null,null,null);a.default=e.exports}}]);